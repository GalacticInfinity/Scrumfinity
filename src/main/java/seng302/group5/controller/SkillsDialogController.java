package seng302.group5.controller;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.stage.Stage;
import seng302.group5.Main;
import seng302.group5.controller.enums.CreateOrEdit;
import seng302.group5.model.Skill;
import seng302.group5.model.undoredo.Action;
import seng302.group5.model.undoredo.UndoRedoObject;

/**
 * The controller for the Skill dialog when creating a new Skill or editing an existing one
 *
 * @author Liang Ma
 */
public class SkillsDialogController {

  @FXML private TextField skillName;
  @FXML private TextArea skillDescription;
  @FXML private Button skillCreation;

  private Main mainApp;
  private Stage thisStage;
  private Skill skill;
  private Skill lastSkill;
  private CreateOrEdit createOrEdit;

  /**
   * Setup the skill dialog controller
   *
   * @param mainApp      The main application object
   * @param thisStage    The stage of the dialog
   * @param createOrEdit If dialog is for creating or editing a skill
   * @param skill        The skill object if editing, null otherwise
   */
  public void setupController(Main mainApp,
                              Stage thisStage,
                              CreateOrEdit createOrEdit,
                              Skill skill) {
    this.mainApp = mainApp;
    this.thisStage = thisStage;

    if (createOrEdit == CreateOrEdit.CREATE) {
      thisStage.setTitle("Create New Skill");
      skillCreation.setText("Create");
    } else if (createOrEdit == CreateOrEdit.EDIT) {
      thisStage.setTitle("Edit Skill");
      skillCreation.setText("Save");

      skillName.setText(skill.getLabel());
      skillDescription.setText(skill.getSkillDescription());
    }
    this.createOrEdit = createOrEdit;

    if (skill != null) {
      this.skill = skill;
      // Make a copy for the undo stack
      this.lastSkill = new Skill(skill);
    } else {
      this.skill = null;
      this.lastSkill = null;
    }

    skillDescription.setOnKeyPressed(event -> {
      if (event.getCode() == KeyCode.ENTER) {
        skillCreation.fire();
      }
    });
    skillCreation.setDefaultButton(true);
  }

  /**
   * Parse a string containing a skill name. Throws exceptions if input is not valid.
   *
   * @param inputSkillName String of skill name
   * @return Input project name if it is valid.
   * @throws Exception Exception with message explaining why input is invalid.
   */
  private String parseSkillName(String inputSkillName) throws Exception {
    inputSkillName = inputSkillName.trim();

    if (inputSkillName.isEmpty()) {
      throw new Exception("Skill Name is empty");
    } else if (inputSkillName.length() > 32) {
      throw new Exception("Skill Name is more than 32 characters long");
    } else {
      String lastSkillName;
      if (lastSkill == null) {
        lastSkillName = "";
      } else {
        lastSkillName = lastSkill.getLabel();
      }
      for (Skill aSkill : mainApp.getSkills()) {
        String aSkillName = aSkill.getLabel();
        if (aSkillName.equals(inputSkillName) && !aSkillName.equals(lastSkillName)) {
          throw new Exception("Skill name is not unique.");
        }
      }
    }
    return inputSkillName;
  }

  /**
   * Generate an UndoRedoObject to place in the stack
   *
   * @return the UndoRedoObject to store
   */
  private UndoRedoObject generateUndoRedoObject() {
    UndoRedoObject undoRedoObject = new UndoRedoObject();

    if (createOrEdit == CreateOrEdit.CREATE) {
      undoRedoObject.setAction(Action.SKILL_CREATE);
    } else {
      undoRedoObject.setAction(Action.SKILL_EDIT);
      undoRedoObject.addDatum(lastSkill);
    }

    // Store a copy of skill to edit in stack to avoid reference problems
    undoRedoObject.setAgileItem(skill);
    Skill skillToStore = new Skill(skill);
    undoRedoObject.addDatum(skillToStore);

    return undoRedoObject;
  }

  /**
   * Handles when the create button is pushed
   *
   * @param e Event generated by event listener.
   */
  @FXML
  protected void SkillCreation(ActionEvent e) {
    String nameOfSkill = null;
    try {
      nameOfSkill = parseSkillName(skillName.getText());
    } catch (Exception e1) {
      // Error - Don't create the object
      Alert alert = new Alert(Alert.AlertType.ERROR);
      alert.setTitle("Invalid Field");
      alert.setHeaderText(null);
      alert.setContentText(e1.getMessage());
      alert.showAndWait();
      return;
    }
    if (createOrEdit == CreateOrEdit.CREATE) {
      skill = new Skill(nameOfSkill, skillDescription.getText());
      mainApp.addSkill(skill);
    } else if (createOrEdit == CreateOrEdit.EDIT) {
      skill.setLabel(nameOfSkill);
      skill.setSkillDescription(skillDescription.getText());
      mainApp.refreshList();
    }

    UndoRedoObject undoRedoObject = generateUndoRedoObject();
    mainApp.newAction(undoRedoObject);

    thisStage.close();
  }

  /**
   * Handles when the cancel button is pushed by not applying changes and closing the dialog
   *
   * @param event Event generated by event listener.
   */
  @FXML
  protected void CancelCreation(ActionEvent event) {
    thisStage.close();
  }

}

